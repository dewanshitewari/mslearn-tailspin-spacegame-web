# ASP.NET Core



# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- '*'

pool:
  vmImage: 'ubuntu-20.04'
  demands:
  - npm

steps:
- task: UseDotNet@2
  displayName: 'Use .NET SDK 5.x'
  inputs:
    version: '5.x'



- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: Tailspin.SpaceGame.Web/wwwroot

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build the project - Release'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration Release'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - Release'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration Release --output $(Build.ArtifactStagingDirectory)/Release'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    arguments: 


- task: whitesource.whiteSource-bolt-v2.bolt.wss.WhiteSource@21
  displayName: WhiteSource

- task: CSE-DevOps.zap-scanner.custom-build-release-task.owaspzap@1
  displayName: 'ZAP Scanner'
  inputs:
    threshold: 1500
    scantype: targetedScan
    url: 'https://dewanshiapp1.azurewebsites.net'
    port: 443
  enabled: false

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      - bash: |
         sudo npm install -g handlebars-cmd
      
         cat <<EOF > owaspzap/nunit-template.hbs
         {{#each site}}
      
         <test-run
             id="2"
             name="Owasp test"
             start-time="{{../[@generated]}}"  >
             <test-suite
                 id="{{@index}}"
                 type="Assembly"
                 name="{{[@name]}}"
                 result="Failed"
                 failed="{{alerts.length}}">
                 <attachments>
                     <attachment>
                         <filePath>owaspzap/report.html</filePath>
                     </attachment>
                 </attachments>
             {{#each alerts}}<test-case
                 id="{{@index}}"
                 name="{{alert}}"
                 result="Failed"
                 fullname="{{alert}}"
                 time="1">
                     <failure>
                         <message>
                             <![CDATA[{{{desc}}}]]>
                         </message>
                         <stack-trace>
                             <![CDATA[
         Solution:
         {{{solution}}}
      
         Reference:
         {{{reference}}}
      
         instances:{{#each instances}}
         * {{uri}}
             - {{method}}
             {{#if evidence}}- {{{evidence}}}{{/if}}
                             {{/each}}]]>
                         </stack-trace>
                     </failure>
             </test-case>
             {{/each}}
             </test-suite>
         </test-run>
         {{/each}}
         EOF
        displayName: 'owasp nunit template'
        condition: always()

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'handlebars owaspzap/report.json < owaspzap/nunit-template.hbs > owaspzap/test-results.xml'